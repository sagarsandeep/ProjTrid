// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TRID.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("VariableLoanPaymentScheuledValidation", SourceFile="FeatureFiles\\VariableLoanPaymentScheuledValidation.feature", SourceLine=0)]
    public partial class VariableLoanPaymentScheuledValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VariableLoanPaymentScheuledValidation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VariableLoanPaymentScheuledValidation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage(string scenarioNo, string rowNumber, string pcSheetName, string miSheetName, string cdSheetName, string aRowNumber, string aSheetName, string abcSheetName, string eSheetName, string egSheetName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
                    "age", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("user is at TRID application homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And(string.Format("user have closing disclosure data from excel sheet {0} for the scenario {1}", cdSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.And(string.Format("user have Mortgage Insurance data from excel sheet {0} for the scenario {1}", miSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And(string.Format("user have variable loan data from excel sheet {0} for the scenario {1}", aSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And(string.Format("user have ARM Best Case variable loan data from excel sheet {0} for the scenario " +
                        "{1}", abcSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("user have Prepaid Charges data from excel sheet {0} for the scenario {1}", pcSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And(string.Format("user have Export data from excel sheet {0} for the scenario {1}", eSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("user have Escrow Grid data from excel sheet {0} for the scenario {1}", egSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
testRunner.When("user navigate to Loan Inputs Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.And("user selects Calculation Method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("user selects loan type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("user selects Frequency of Payments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("user selects Loan Term", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("user selects Repayment Term Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
    testRunner.And("user enters Loan detail input values for computation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("user enters Escrow Grid Input values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("user enters all input values for Prepaid Charges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("user enters input value for prepaid custom fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("user navigates to MI Inputs and Results Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("user enters pmi rate values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("user enters other pmi input values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("user enters FHA/USDA Loan Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("user enters disclosed input values for Mortgage Insurance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("user navigates to Disclosure Inputs Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("user enters disclosed input values for Closing Disclosure Loan Terms & Projected " +
                    "Payments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("user enters disclosed input values for Closing Disclosure Loan Calculations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("user enters disclosed input values for Property Cost and Escrow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("user navigates to Loan Estimate Cards Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("user enters disclsoed input values for Loan Estimate - Comparisons", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
testRunner.Then("user navigates to ARM Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And("updated/computed Payment Stream Number value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("updated/computed Number of Payments value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("updated/computed Payment Amount value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("updated/computed Principal and Interest Payment value should display on ARM Best " +
                    "Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("updated/computed PMI Payment value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 138", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_138()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("138", "124", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "2", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 139", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_139()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("139", "125", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "3", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 140", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_140()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("140", "126", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "4", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 141", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_141()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("141", "127", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "5", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 142", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_142()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("142", "128", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "6", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 143", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_143()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("143", "129", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "7", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 144", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_144()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("144", "130", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "8", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 145", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_145()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("145", "131", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "9", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 146", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_146()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("146", "132", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "10", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Best Case on Arms p" +
            "age, 147", SourceLine=45)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage_147()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleBestCaseOnArmsPage("147", "133", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "11", "ARMTerms", "ARMBestCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage(string scenarioNo, string rowNumber, string pcSheetName, string miSheetName, string cdSheetName, string aRowNumber, string aSheetName, string awcSheetName, string eSheetName, string egSheetName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
                    "page", exampleTags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
testRunner.Given("user is at TRID application homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.And(string.Format("user have closing disclosure data from excel sheet {0} for the scenario {1}", cdSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And(string.Format("user have Mortgage Insurance data from excel sheet {0} for the scenario {1}", miSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And(string.Format("user have variable loan data from excel sheet {0} for the scenario {1}", aSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And(string.Format("user have ARM Worst Case variable loan data from excel sheet {0} for the scenario" +
                        " {1}", awcSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And(string.Format("user have Prepaid Charges data from excel sheet {0} for the scenario {1}", pcSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And(string.Format("user have Export data from excel sheet {0} for the scenario {1}", eSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And(string.Format("user have Escrow Grid data from excel sheet {0} for the scenario {1}", egSheetName, rowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
testRunner.When("user navigate to Loan Inputs Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.And("user selects Calculation Method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("user selects loan type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("user selects Frequency of Payments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("user selects Loan Term", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("user selects Repayment Term Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
    testRunner.And("user enters Loan detail input values for computation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("user enters Escrow Grid Input values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("user enters all input values for Prepaid Charges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("user enters input value for prepaid custom fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("user navigates to MI Inputs and Results Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("user enters pmi rate values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("user enters other pmi input values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("user enters FHA/USDA Loan Details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("user enters disclosed input values for Mortgage Insurance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("user navigates to Disclosure Inputs Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("user enters disclosed input values for Closing Disclosure Loan Terms & Projected " +
                    "Payments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("user enters disclosed input values for Closing Disclosure Loan Calculations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("user enters disclosed input values for Property Cost and Escrow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("user navigates to Loan Estimate Cards Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("user enters disclsoed input values for Loan Estimate - Comparisons", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
testRunner.Then("user navigates to ARM Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 94
 testRunner.And("updated/computed Payment Stream Number value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("updated/computed Number of Payments value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("updated/computed Payment Amount value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("updated/computed Period Payment value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("updated/computed Period PMI value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 138", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_138()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("138", "124", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "2", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 139", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_139()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("139", "125", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "3", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 140", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_140()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("140", "126", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "4", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 141", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_141()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("141", "127", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "5", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 142", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_142()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("142", "128", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "6", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 143", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_143()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("143", "129", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "7", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 144", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_144()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("144", "130", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "8", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 145", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_145()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("145", "131", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "9", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 146", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_146()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("146", "132", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "10", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Giving inputs from Excel file and validating Payment Schedule Worst Case on Arms " +
            "page, 147", SourceLine=102)]
        public virtual void GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_147()
        {
            this.GivingInputsFromExcelFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("147", "133", "PrepaidCharges", "MortgageInsurance", "ClosingDisclosure", "11", "ARMTerms", "ARMWorstCase", "Export", "EscrowGrid", ((string[])(null)));
#line hidden
        }
        
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage(string scenarioNo, string aRowNumber, string abcSheetName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Uploading JSON file and validating Payment Schedule Best Case on Arms page", exampleTags);
#line 115
this.ScenarioSetup(scenarioInfo);
#line 116
testRunner.Given("user is at TRID application homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 117
 testRunner.And(string.Format("user have ARM Best Case variable loan data from excel sheet {0} for the scenario " +
                        "{1}", abcSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
testRunner.When("user upload json file for the scenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
testRunner.Then("user navigates to ARM Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.And("updated/computed Payment Stream Number value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("updated/computed Number of Payments value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("updated/computed Payment Amount value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("updated/computed Principal and Interest Payment value should display on ARM Best " +
                    "Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("updated/computed PMI Payment value should display on ARM Best Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 138", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_138()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("138", "2", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 139", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_139()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("139", "3", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 140", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_140()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("140", "4", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 141", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_141()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("141", "5", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 142", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_142()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("142", "6", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 143", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_143()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("143", "7", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 144", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_144()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("144", "8", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 145", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_145()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("145", "9", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 146", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_146()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("146", "10", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Best Case on Arms page, 147", SourceLine=128)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage_147()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleBestCaseOnArmsPage("147", "11", "ARMBestCase", ((string[])(null)));
#line hidden
        }
        
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage(string scenarioNo, string aRowNumber, string awcSheetName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Uploading JSON file and validating Payment Schedule Worst Case on Arms page", exampleTags);
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
testRunner.Given("user is at TRID application homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And(string.Format("user have ARM Worst Case variable loan data from excel sheet {0} for the scenario" +
                        " {1}", awcSheetName, aRowNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
testRunner.When("user upload json file for the scenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
testRunner.Then("user navigates to ARM Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
 testRunner.And("updated/computed Payment Stream Number value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("updated/computed Number of Payments value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("updated/computed Payment Amount value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("updated/computed Period Payment value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("updated/computed Period PMI value should display on ARM Worst Case", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 138", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_138()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("138", "2", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 139", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_139()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("139", "3", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 140", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_140()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("140", "4", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 141", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_141()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("141", "5", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 142", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_142()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("142", "6", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 143", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_143()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("143", "7", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 144", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_144()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("144", "8", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 145", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_145()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("145", "9", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 146", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_146()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("146", "10", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Uploading JSON file and validating Payment Schedule Worst Case on Arms page, 147", SourceLine=154)]
        public virtual void UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage_147()
        {
            this.UploadingJSONFileAndValidatingPaymentScheduleWorstCaseOnArmsPage("147", "11", "ARMWorstCase", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
